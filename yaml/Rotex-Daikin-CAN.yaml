############################### Version 1.4.0 #####################################
substitutions:
  rx_pin: GPIO48
  tx_pin: GPIO47

esphome:
    name: rotex
    friendly_name: Rotex
    includes:
        - include/utils.h
        - include/request.h
        - include/${heatpump_model}.h
        - src/utils.cpp
    platformio_options:
        build_unflags:
            - "-std=gnu++11"
        build_flags:
            - "-std=gnu++17"
    on_loop:
      then:
      - lambda: |-
          data_requests.sendNextPendingRequest(id(can_bus));

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

globals:
  - id: backup_dhw
    type: int

  - id: interval_active
    type: bool
    restore_value: yes
    initial_value: "true"

# Enable logging
logger:
  #level: VERBOSE
  level: INFO

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

ota:
  platform: esphome
  password: !secret ota_password

web_server:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Rotex Fallback Hotspot"
    password: "H3jGqANSa7aL"

captive_portal:

canbus:
  - platform: esp32_can
    id: can_bus
    can_id: 0x680
    tx_pin: ${tx_pin}
    rx_pin: ${rx_pin}
    bit_rate: 20kbps

    on_frame:
      - can_id: 0 # listen to all messages
        can_id_mask: 0
        then:
          - lambda: |-
              struct timeval tv;
              gettimeofday(&tv, nullptr);
              ESP_LOGI("main", "mil: %d|now: %d|sec: %ld|usec: %d",
                millis(), id(homeassistant_time).now(), tv.tv_sec, tv.tv_usec);

              data_requests.handle(id(can_bus), can_id, x, millis());

time:
  - platform: homeassistant
    id: homeassistant_time

<<: !include buttons.yaml
<<: !include numbers.yaml
<<: !include selects.yaml
<<: !include sensors.yaml
<<: !include switches.yaml
<<: !include texts.yaml
<<: !include text_sensors.yaml
